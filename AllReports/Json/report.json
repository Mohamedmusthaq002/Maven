[
  {
    "line": 1,
    "elements": [
      {
        "start_timestamp": "2023-08-28T07:47:54.443Z",
        "before": [
          {
            "result": {
              "duration": 1545500,
              "status": "passed"
            },
            "match": {
              "location": "Hooks.befSce1()"
            }
          },
          {
            "result": {
              "duration": 141900,
              "status": "passed"
            },
            "match": {
              "location": "Hooks.befSce2()"
            }
          },
          {
            "result": {
              "duration": 122300,
              "status": "passed"
            },
            "match": {
              "location": "Hooks.befSce3()"
            }
          },
          {
            "result": {
              "error_message": "org.openqa.selenium.SessionNotCreatedException: Could not start a new session. Response code 500. Message: session not created\nfrom no such execution context: uniqueContextId not found\n  (Session info: chrome\u003d116.0.5845.111) \nHost info: host: \u0027DESKTOP-IAENLGO\u0027, ip: \u0027192.168.1.56\u0027\nBuild info: version: \u00274.11.0\u0027, revision: \u0027040bc5406b\u0027\nSystem info: os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.20\u0027\nDriver info: org.openqa.selenium.chrome.ChromeDriver\nCommand: [null, newSession {capabilities\u003d[Capabilities {browserName: chrome, goog:chromeOptions: {args: [--remote-allow-origins\u003d*], extensions: []}}]}]\r\n\tat org.openqa.selenium.remote.ProtocolHandshake.createSession(ProtocolHandshake.java:140)\r\n\tat org.openqa.selenium.remote.ProtocolHandshake.createSession(ProtocolHandshake.java:96)\r\n\tat org.openqa.selenium.remote.ProtocolHandshake.createSession(ProtocolHandshake.java:68)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:163)\r\n\tat org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:196)\r\n\tat org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:171)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:518)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.startSession(RemoteWebDriver.java:232)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.\u003cinit\u003e(RemoteWebDriver.java:159)\r\n\tat org.openqa.selenium.chromium.ChromiumDriver.\u003cinit\u003e(ChromiumDriver.java:108)\r\n\tat org.openqa.selenium.chrome.ChromeDriver.\u003cinit\u003e(ChromeDriver.java:88)\r\n\tat org.openqa.selenium.chrome.ChromeDriver.\u003cinit\u003e(ChromeDriver.java:83)\r\n\tat org.openqa.selenium.chrome.ChromeDriver.\u003cinit\u003e(ChromeDriver.java:51)\r\n\tat org.helper.BaseClass.browserLaunch(BaseClass.java:37)\r\n\tat org.stepdefinition.Hooks.bef(Hooks.java:15)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:26)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:20)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:65)\r\n\tat cucumber.runner.HookDefinitionMatch.runStep(HookDefinitionMatch.java:16)\r\n\tat cucumber.runner.TestStep.executeStep(TestStep.java:65)\r\n\tat cucumber.runner.TestStep.run(TestStep.java:50)\r\n\tat cucumber.runner.TestCase.run(TestCase.java:42)\r\n\tat cucumber.runner.Runner.runPickle(Runner.java:50)\r\n\tat io.cucumber.junit.PickleRunners$NoStepDescriptions.run(PickleRunners.java:146)\r\n\tat io.cucumber.junit.FeatureRunner.runChild(FeatureRunner.java:68)\r\n\tat io.cucumber.junit.FeatureRunner.runChild(FeatureRunner.java:23)\r\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\r\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\r\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\r\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\r\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\r\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\r\n\tat io.cucumber.junit.Cucumber.runChild(Cucumber.java:144)\r\n\tat io.cucumber.junit.Cucumber.runChild(Cucumber.java:65)\r\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\r\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\r\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\r\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\r\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\r\n\tat io.cucumber.junit.Cucumber$RunCucumber.evaluate(Cucumber.java:174)\r\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\r\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\r\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\r\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:538)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:760)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:460)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:206)\r\n",
              "duration": 8507164800,
              "status": "failed"
            },
            "match": {
              "location": "Hooks.bef()"
            }
          }
        ],
        "line": 4,
        "name": "",
        "description": "    To Validate the Login Funtionality Using Valid email and Invalid Password",
        "id": "to-validate-the-facebook-application;",
        "after": [
          {
            "result": {
              "error_message": "java.lang.NullPointerException\r\n\tat org.stepdefinition.Hooks.aft(Hooks.java:25)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:26)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:20)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:65)\r\n\tat cucumber.runner.HookDefinitionMatch.runStep(HookDefinitionMatch.java:16)\r\n\tat cucumber.runner.TestStep.executeStep(TestStep.java:65)\r\n\tat cucumber.runner.TestStep.run(TestStep.java:50)\r\n\tat cucumber.runner.TestCase.run(TestCase.java:50)\r\n\tat cucumber.runner.Runner.runPickle(Runner.java:50)\r\n\tat io.cucumber.junit.PickleRunners$NoStepDescriptions.run(PickleRunners.java:146)\r\n\tat io.cucumber.junit.FeatureRunner.runChild(FeatureRunner.java:68)\r\n\tat io.cucumber.junit.FeatureRunner.runChild(FeatureRunner.java:23)\r\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\r\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\r\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\r\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\r\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\r\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\r\n\tat io.cucumber.junit.Cucumber.runChild(Cucumber.java:144)\r\n\tat io.cucumber.junit.Cucumber.runChild(Cucumber.java:65)\r\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\r\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\r\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\r\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\r\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\r\n\tat io.cucumber.junit.Cucumber$RunCucumber.evaluate(Cucumber.java:174)\r\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\r\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\r\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\r\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:538)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:760)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:460)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:206)\r\n",
              "duration": 2994000,
              "status": "failed"
            },
            "match": {
              "location": "Hooks.aft(Scenario)"
            }
          },
          {
            "result": {
              "duration": 379600,
              "status": "passed"
            },
            "match": {
              "location": "Hooks.aftSce3()"
            }
          },
          {
            "result": {
              "duration": 168200,
              "status": "passed"
            },
            "match": {
              "location": "Hooks.aftSce2()"
            }
          },
          {
            "result": {
              "duration": 150800,
              "status": "passed"
            },
            "match": {
              "location": "Hooks.aftSce1()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8708900,
              "status": "skipped"
            },
            "line": 7,
            "name": "User have to Enter the Valid email and Invalid Password",
            "match": {
              "location": "StepDefinition.user_have_to_Enter_the_Valid_email_and_Invalid_Password(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "Selenium"
                ]
              },
              {
                "cells": [
                  "Password",
                  "0987654"
                ]
              },
              {
                "cells": [
                  "Email",
                  "greens123@gmail.com"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 796200,
              "status": "skipped"
            },
            "line": 11,
            "name": "User have to Click the Login button",
            "match": {
              "location": "StepDefinition.user_have_to_Click_the_Login_button()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 834600,
              "status": "skipped"
            },
            "line": 12,
            "name": "User have to reach Invalid Credential Page",
            "match": {
              "location": "StepDefinition.user_have_to_reach_Invalid_Credential_Page()"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@sanity"
          },
          {
            "name": "@regression"
          }
        ]
      },
      {
        "start_timestamp": "2023-08-28T07:48:03.182Z",
        "before": [
          {
            "result": {
              "duration": 153300,
              "status": "passed"
            },
            "match": {
              "location": "Hooks.befSce1()"
            }
          },
          {
            "result": {
              "duration": 276600,
              "status": "passed"
            },
            "match": {
              "location": "Hooks.befSce2()"
            }
          },
          {
            "result": {
              "duration": 95600,
              "status": "passed"
            },
            "match": {
              "location": "Hooks.befSce3()"
            }
          },
          {
            "result": {
              "duration": 5295852500,
              "status": "passed"
            },
            "match": {
              "location": "Hooks.bef()"
            }
          }
        ],
        "line": 15,
        "name": "",
        "description": "    To Validate the Login Funtionality Using InValid email and Invalid Password",
        "id": "to-validate-the-facebook-application;",
        "after": [
          {
            "embeddings": [
              {
                "data": "\u003d\u003d",
                "mime_type": "image/png"
              }
            ],
            "result": {
              "duration": 304282300,
              "status": "passed"
            },
            "match": {
              "location": "Hooks.aft(Scenario)"
            }
          },
          {
            "result": {
              "duration": 141100,
              "status": "passed"
            },
            "match": {
              "location": "Hooks.aftSce3()"
            }
          },
          {
            "result": {
              "duration": 101600,
              "status": "passed"
            },
            "match": {
              "location": "Hooks.aftSce2()"
            }
          },
          {
            "result": {
              "duration": 106600,
              "status": "passed"
            },
            "match": {
              "location": "Hooks.aftSce1()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "error_message": "java.lang.NullPointerException\r\n\tat org.stepdefinition.StepDefinition.user_have_to_Enter_the_InValid_email_and_Invalid_Password(StepDefinition.java:50)\r\n\tat ✽.User have to Enter the InValid email and Invalid Password(file:Login.feature:18)\r\n",
              "duration": 13441100,
              "status": "failed"
            },
            "line": 18,
            "name": "User have to Enter the InValid email and Invalid Password",
            "match": {
              "location": "StepDefinition.user_have_to_Enter_the_InValid_email_and_Invalid_Password(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "Password",
                  "Email",
                  "PhoneNumber"
                ]
              },
              {
                "cells": [
                  "Java",
                  "sql",
                  "python",
                  "oracle"
                ]
              },
              {
                "cells": [
                  "selenium",
                  "Java123",
                  "12345",
                  "c++"
                ]
              },
              {
                "cells": [
                  "567654",
                  "Aws",
                  "Greens123",
                  "javaselenium"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2216800,
              "status": "skipped"
            },
            "line": 23,
            "name": "User have to Click the Login button",
            "match": {
              "location": "StepDefinition.user_have_to_Click_the_Login_button()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1649100,
              "status": "skipped"
            },
            "line": 24,
            "name": "User have to reach Invalid Credential Page",
            "match": {
              "location": "StepDefinition.user_have_to_reach_Invalid_Credential_Page()"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@regression"
          }
        ]
      }
    ],
    "name": "To Validate the FaceBook Application",
    "description": "",
    "id": "to-validate-the-facebook-application",
    "keyword": "Feature",
    "uri": "file:Login.feature",
    "tags": []
  }
]